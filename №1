/*
* –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ1
* –¢–µ–º–∞: –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–¥–∞—á (To-Do List)
* –°—Ç—É–¥–µ–Ω—Ç: –ü–∞–Ω—Ç–µ–ª–µ–µ–≤ –ê–¥—Ä–∏–∞–Ω –î–µ–Ω–∏—Å–æ–≤–∏—á
* –ì—Ä—É–ø–ø–∞: 24–ö–ù–¢-1
* –ë–∏–ª–µ—Ç: 2
*/

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class ToDoConsoleApp {
    private static final Scanner scanner = new Scanner(System.in);
    private static final DateTimeFormatter DATE_FMT = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    private final List<Task> tasks = new ArrayList<>();

    public static void main(String[] args) {
        new ToDoConsoleApp().launch();
    }

    public void launch() {
        Map<String, Runnable> actions = Map.of(
            "1", this::addTask,
            "2", this::editTask,
            "3", this::deleteTask,
            "4", this::changePriority,
            "5", this::setDueDate,
            "6", this::listTasks,
            "7", this::sortByDate,
            "8", this::searchTasks
        );

        boolean running = true;
        while (running) {
            printMenu();
            String choice = scanner.nextLine().trim();
            if (choice.equals("0")) break;
            actions.getOrDefault(choice, () -> System.out.println("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")).run();
        }
        System.out.println("üëã –í—ã—Ö–æ–¥. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
    }

    private void printMenu() {
        System.out.println("\nüìã –ú–µ–Ω—é –∑–∞–¥–∞—á:");
        System.out.println("1Ô∏è‚É£ - –°–æ–∑–¥–∞—Ç—å");
        System.out.println("2Ô∏è‚É£ - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å");
        System.out.println("3Ô∏è‚É£ - –£–¥–∞–ª–∏—Ç—å");
        System.out.println("4Ô∏è‚É£ - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç");
        System.out.println("5Ô∏è‚É£ - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ä–æ–∫");
        System.out.println("6Ô∏è‚É£ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏");
        System.out.println("7Ô∏è‚É£ - –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –¥–∞—Ç–µ");
        System.out.println("8Ô∏è‚É£ - –ü–æ–∏—Å–∫");
        System.out.println("0Ô∏è‚É£ - –í—ã–π—Ç–∏");
        System.out.print("–í—ã–±–æ—Ä: ");
    }

    private void addTask() {
        String title = readInput("üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ", "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)");
        String desc = readInput("‚úèÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: ", "");
        Priority pr = readPriority("‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (LOW, MEDIUM, HIGH) [MEDIUM]: ", Priority.MEDIUM);
        LocalDate due = readDate("üìÖ –°—Ä–æ–∫ (yyyy-MM-dd) –∏–ª–∏ –ø—É—Å—Ç–æ: ");
        tasks.add(new Task(title, desc, due, pr));
        System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞.");
    }

    private void editTask() {
        Task t = selectTask();
        if (t == null) return;
        String title = readInput("üìù –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (Enter —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å): ", null);
        if (title != null) t.title = title;
        String desc = readInput("‚úèÔ∏è –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (Enter —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å): ", null);
        if (desc != null) t.description = desc;
        System.out.println("‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.");
    }

    private void deleteTask() {
        Task t = selectTask();
        if (t != null) {
            System.out.print("‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ (y/N): ");
            if (scanner.nextLine().trim().equalsIgnoreCase("y")) {
                tasks.remove(t);
                System.out.println("üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.");
            }
        }
    }

    private void changePriority() {
        Task t = selectTask();
        if (t != null) {
            Priority pr = readPriority("‚ö° –ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ", null);
            if (pr != null) t.priority = pr;
        }
    }

    private void setDueDate() {
        Task t = selectTask();
        if (t != null) t.dueDate = readDate("üìÖ –ù–æ–≤—ã–π —Å—Ä–æ–∫ (Enter —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å): ");
    }

    private void listTasks() {
        if (tasks.isEmpty()) { System.out.println("üì≠ –ù–µ—Ç –∑–∞–¥–∞—á."); return; }
        tasks.forEach(System.out::println);
    }

    private void sortByDate() {
        tasks.sort(Comparator.comparing(t -> t.dueDate, Comparator.nullsLast(Comparator.naturalOrder())));
        listTasks();
    }

    private void searchTasks() {
        System.out.print("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: ");
        String q = scanner.nextLine().trim().toLowerCase();
        tasks.stream().filter(t -> t.title.toLowerCase().contains(q)).forEach(System.out::println);
    }

    private Task selectTask() {
        listTasks();
        System.out.print("üÜî –í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏: ");
        try { int id = Integer.parseInt(scanner.nextLine());
            return tasks.stream().filter(t -> t.id == id).findFirst().orElse(null);
        } catch (NumberFormatException e) { return null; }
    }

    private String readInput(String prompt, String defaultVal) {
        System.out.print(prompt);
        String s = scanner.nextLine().trim();
        return s.isEmpty() ? defaultVal : s;
    }

    private Priority readPriority(String prompt, Priority defaultVal) {
        System.out.print(prompt);
        String s = scanner.nextLine().trim().toUpperCase();
        if (s.isEmpty()) return defaultVal;
        try { return Priority.valueOf(s); } catch (Exception e) { return defaultVal; }
    }

    private LocalDate readDate(String prompt) {
        System.out.print(prompt);
        String s = scanner.nextLine().trim();
        if (s.isEmpty()) return null;
        try { return LocalDate.parse(s, DATE_FMT); } catch (Exception e) { return null; }
    }

    private static class Task {
        private static int NEXT_ID = 1;
        int id = NEXT_ID++;
        String title, description;
        LocalDate dueDate;
        Priority priority;

        Task(String title, String description, LocalDate dueDate, Priority priority) {
            this.title = title; this.description = description;
            this.dueDate = dueDate; this.priority = priority;
        }

        public String toString() {
            return String.format("ID=%d | %s | pri=%s | due=%s\n    %s",
                id, title, priority, dueDate == null ? "-" : dueDate.format(DATE_FMT), description);
        }
    }

    private enum Priority { LOW, MEDIUM, HIGH }
}


